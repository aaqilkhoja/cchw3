AWSTemplateFormatVersion: '2010-09-09'
Resources:
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties: 
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Sid: ""
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: cc-hw3-b2-cf

  FrontEndBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: cc-hw3-b1-cf
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  PortalBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - FrontEndBucket
    Properties:
      Bucket: !Ref FrontEndBucket
      PolicyDocument: 
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join ["",["arn:aws:s3:::",!Ref FrontEndBucket,"/*"]]
            Principal: "*"
        

AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS Serverless Application Model template describing your function.

Resources:
  indexphotosLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cc-hw3-b2-cf
      Description: ''
      MemorySize: 128
      Timeout: 5
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt indexphotosLambdaExecutionRole.Arn
      FileSystemConfigs:
        - Arn: arn:aws:lambda:us-east-1:974008271039:function:index-photos
          LocalMountPath: /mnt/efs 
      Events:
        BucketEvent1:
          Type: "AWS::Lambda::EventSourceMapping"
          Properties:
            EventSourceArn: !GetAtt Bucket1.Arn
            FunctionName: !GetAtt indexphotosLambdaFunction.Arn
            Enabled: true

  indexphotosLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: indexphotosLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: arn:aws:s3:::cc-hw3-b2-cf/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*






AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template mirroring the provided SAM template for the searchphotos function.

Resources:
  searchphotosLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cc-hw3-b2-cf
      Description: ''
      MemorySize: 128
      Timeout: 8
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role: !GetAtt searchphotosLambdaExecutionRole.Arn

  searchphotosLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: searchphotosLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: arn:aws:s3:::cc-hw3-b2-cf/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  searchphotosApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: searchphotosApi
      Description: API for the searchphotos Lambda function
      FailOnWarnings: true

  searchphotosResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref searchphotosApi
      ParentId: !GetAtt searchphotosApi.RootResourceId
      PathPart: search

  searchphotosMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref searchphotosApi
      ResourceId: !Ref searchphotosResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${searchphotosLambdaFunction.Arn}/invocations

  searchphotosPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref searchphotosLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${searchphotosApi}/*/*/search

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda Function"
    Value: !GetAtt searchphotosLambdaFunction.Arn
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${searchphotosApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/search"


  Bucket1:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BucketPolicy1:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket1
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Deny
            Principal: '*'
            Resource:
              - !Sub "arn:aws:s3:::${Bucket1}/*"
              - !Sub "arn:aws:s3:::${Bucket1}"
            Condition:
              Bool:
                aws:SecureTransport: false

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda Function"
    Value: !GetAtt indexphotosLambdaFunction.Arn
  BucketArn:
    Description: "ARN of the S3 Bucket"
    Value: !GetAtt Bucket1.Arn






  AIPhotoSearchApi:
    Type: AWS::ApiGateway::RestApi
    DependsOn:
      - APIGatewayRole
      - PhotoBucket
    Properties:
      Name: Photo Search API -cf
      Description: A demo API for Tagging and searching Photos
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at Columbia University."
          version: "1.0.0"
          title: "AI Photo Search"
        basePath: "/dev"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              consumes:
              - "application/json"
              produces: 
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: "{\"statusCode\":200}"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: "{\"statusCode\":200}"
                requestTemplates:
                  application/json: "{'statusCode':200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /upload:
            put:
              operationId: "uploadPhoto"
              produces:
              - "application/json"
              parameters:
              - name: "Content-Type"
                in: "header"
                required: false
                type: "string"
              - name: "Accept"
                in: "header"
                required: false
                type: "string"
              - name: "key"
                in: "query"
                required: true
                type: "string"
              - name: "X-Amz-Meta-CustomLabels"
                in: "header"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/MODELa79541"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt APIGatewayRole.Arn
                type: "aws"
                httpMethod: "PUT"
                uri: !Join ["",["arn:aws:apigateway:us-east-1:s3:path/",!Ref PhotoBucket,"/{object}"]]
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.path.object: "method.request.querystring.key"
                  integration.request.header.Accept: "method.request.header.Accept"
                  integration.request.header.X-Amz-Meta-CustomLabels: "method.request.header.X-Amz-Meta-CustomLabels"
                  integration.request.header.Content-Type: "method.request.header.Content-Type"
                passthroughBehavior: "when_no_templates"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "{\"statusCode\":200}"
                requestTemplates:
                  application/json: "{'statusCode':200}"
                passthroughBehavior: "never"
                type: "mock"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          MODELa79541:
            type: "object"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
        x-amazon-apigateway-binary-media-types:
        - "image/png"
        - "image/jpeg"
        - "image/jpg"
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AIPhotoSearchApi
    Properties:
      RestApiId: !GetAtt AIPhotoSearchApi.RestApiId
      StageName: dev
      StageDescription:
        LoggingLevel: INFO
  ApiGateWayApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - ApiGatewayDeployment
    Properties:
      Name: !Sub ${AWS::StackName}-ApiKey
      Description: API Key for the AI Photo Search API
      Enabled: true
      StageKeys:
        - RestApiId: !Ref AIPhotoSearchApi
          StageName: dev
  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ApiGateWayApiKey
      - ApiGatewayDeployment
    Properties:
      UsagePlanName: !Sub ${AWS::StackName}-UsagePlan
      Description: Usage Plan for the AI Photo Search API
      ApiStages:
        - ApiId: !Ref AIPhotoSearchApi
          Stage: dev
  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - ApiGateWayApiKey
      - ApiGatewayUsagePlan
    Properties:
      KeyId: !Ref ApiGateWayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan
